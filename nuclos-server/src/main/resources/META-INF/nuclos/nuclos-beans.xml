<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/jms
                           http://www.springframework.org/schema/jms/spring-jms.xsd
                           http://activemq.apache.org/schema/core
                           http://activemq.apache.org/schema/core/activemq-core.xsd
                           http://www.springframework.org/schema/tx
     					   http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
						   http://www.springframework.org/schema/aop
     					   http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
     					   http://www.springframework.org/schema/security
     					   http://www.springframework.org/schema/security/spring-security-3.1.xsd
     					   http://www.springframework.org/schema/jee
       					   http://www.springframework.org/schema/jee/spring-jee-3.1.xsd">

	<!--
		Enable Annotation with @Configurable
		http://forum.springsource.org/archive/index.php/t-39571.html 
	 -->
	<context:annotation-config/>

	<!--
		Enable @AspectJ Support of Sprint AOP
		http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/aop.html#aop-aspectj-support
		
		This is unneeded, as we use direct AspectJ support.
	 -->
	<!-- aop:aspectj-autoproxy/ -->

	<!-- The following config is borrowed from Roo-1.1 (tp) -->
	<!--
        This will automatically locate any and all property files you have
        within your classpath, provided they fall under the META-INF/spring
        directory. The located property files are parsed and their values can
        then be used within application context files in the form of
        ${propertyKey}.
    -->
    <!-- context:property-placeholder location="classpath*:META-INF/spring/*.properties"/ -->
    <!--
        Turn on AspectJ @Configurable support. As a result, any time you
        instantiate an object, Spring will attempt to perform dependency
        injection on that object. This occurs for instantiation via the "new"
        keyword, as well as via reflection. This is possible because AspectJ
        is used to "weave" Roo-based applications at compile time. In effect
        this feature allows dependency injection of any object at all in your
        system, which is a very useful feature (without @Configurable you'd
        only be able to dependency inject objects acquired from Spring or
        subsequently presented to a specific Spring dependency injection
        method). Roo applications use this useful feature in a number of
        areas, such as @PersistenceContext injection into entities.
    -->
    <context:spring-configured/>
    <!--
        This declaration will cause Spring to locate every @Component,
        @Repository and @Service in your application. In practical terms this
        allows you to write a POJO and then simply annotate the new POJO as an
        @Service and Spring will automatically detect, instantiate and
        dependency inject your service at startup time. Importantly, you can
        then also have your new service injected into any other class that
        requires it simply by declaring a field for your service inside the
        relying class and Spring will inject it. Note that two exclude filters
        are declared. The first ensures that Spring doesn't spend time
        introspecting Roo-specific ITD aspects. The second ensures Roo doesn't
        instantiate your @Controller classes, as these should be instantiated
        by a web tier application context. Refer to web.xml for more details
        about the web tier application context setup services.

        Furthermore, this turns on @Autowired, @PostConstruct etc support. These
        annotations allow you to use common Spring and Java Enterprise Edition
        annotations in your classes without needing to do any special configuration.
        The most commonly used annotation is @Autowired, which instructs Spring to
        dependency inject an object into your class.
    -->
    <context:component-scan base-package="org.nuclos">
    	<context:exclude-filter expression=".*_Roo_.*" type="regex"/>
    	<context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
    </context:component-scan>
    
    <!-- 
    	Inject beans into the servlet context
    	see http://andykayley.blogspot.com/2007/11/how-to-inject-spring-beans-into.html    	
	-->

	<!-- for transaction manager annotation based -->
	<tx:annotation-driven mode="aspectj" transaction-manager="transactionManager"/>

    <bean id="appContext" class="org.nuclos.common.SpringApplicationContextHolder"/>

    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>

	<!-- Configurer that replaces ${...} placeholders with values from properties files -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<jee:jndi-lookup jndi-name="java:comp/env/nuclos-conf-jdbc"/>
			</list>
		</property>
	</bean>
	
	<!-- Global server timer -->
	<bean id="timer" class="java.util.Timer" destroy-method="cancel">
		<constructor-arg><value>NuclosServerTimer</value></constructor-arg>
		<constructor-arg><value>true</value></constructor-arg>
	</bean>

	<!-- Server Startup: Logging version (and svn) information -->

	<bean id="startup" class="org.nuclos.common.startup.Startup"/>

	<!-- JDBC start -->

	<bean id="nuclosDataSource" class="org.nuclos.server.database.NuclosBasicDatasource" destroy-method="close">
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="url" value="${jdbcUrl}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="accessToUnderlyingConnectionAllowed" value="true"/>
    </bean>

    <!-- JDBC end -->

	<!-- Transaction Manager annotation based -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="nuclosDataSource"/>
	</bean>

	<!-- Dynamic classloading start -->
	<bean id="customCodeManager" class="org.nuclos.server.customcode.CustomCodeManager">
	</bean>
	<!-- Dynamic classloading end -->

	<!-- Remoting start (Should this be in nuclos-remoting.xml?) -->

	<bean id="remoteInvocationExecutor" class="org.nuclos.server.common.NuclosRemoteInvocationExecutor"
		depends-on="nucletDalProvider" destroy-method="destroy">
		<property name="inputContext" ref="inputContext"/>
		<property name="nuclosRemoteContextHolder" ref="nuclosRemoteContextHolder"/>
		<property name="nuclosUserDetailsContextHolder" ref="nuclosUserDetailsContextHolder"/>
	</bean>
	
	<bean id="inputContext" class="org.nuclos.api.context.InputContext" destroy-method="destroy" factory-method="getInstance">
	</bean>
	
	<!-- Transaction and Rollback -->

	<bean id="attrSource" class="org.nuclos.server.common.NuclosAnnotationTransactionAttributeSource"/>

	<bean id="nuclosRemoteRollback" class="org.nuclos.server.common.NuclosRemoteRollbackInterceptor">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributeSource" ref="attrSource"></property>
	</bean>
	
	<!-- Services/Beans -->

	<bean id="masterDataService" class="org.nuclos.server.masterdata.ejb3.MasterDataFacadeBean"/>

	<bean id="parameterService" class="org.nuclos.server.common.ejb3.ParameterFacadeBean"/>

	<bean id="stateService" class="org.nuclos.server.statemodel.ejb3.StateFacadeBean"/>

	<bean id="serverMetaService" class="org.nuclos.server.servermeta.ejb3.ServerMetaFacadeBean"/>

	<bean id="localeService" class="org.nuclos.server.common.ejb3.LocaleFacadeBean"/>

	<bean id="preferencesService" class="org.nuclos.server.common.ejb3.PreferencesFacadeBean"/>

	<bean id="securityService" class="org.nuclos.server.common.ejb3.SecurityFacadeBean"/>

	<bean id="layoutService" class="org.nuclos.server.attribute.ejb3.LayoutFacadeBean"/>

	<bean id="attributeService" class="org.nuclos.server.attribute.ejb3.AttributeFacadeBean"/>

	<bean id="metaDataService" class="org.nuclos.server.masterdata.ejb3.MetaDataFacadeBean">
		<property name="processorFactory" ref="processorFactorySingleton"/>
	</bean>

	<bean id="genericObjectService" class="org.nuclos.server.genericobject.ejb3.GenericObjectFacadeBean"/>

	<bean id="generatorService" class="org.nuclos.server.genericobject.ejb3.GeneratorFacadeBean"/>

	<bean id="searchFilterService" class="org.nuclos.server.searchfilter.ejb3.SearchFilterFacadeBean"/>

	<bean id="resourceService" class="org.nuclos.server.resource.ejb3.ResourceFacadeBean"/>

	<bean id="timelimitTaskService" class="org.nuclos.server.common.ejb3.TimelimitTaskFacadeBean"/>

	<bean id="taskService" class="org.nuclos.server.common.ejb3.TaskFacadeBean"/>

	<bean id="datasourceService" class="org.nuclos.server.report.ejb3.DatasourceFacadeBean"/>

	<bean id="entityService" class="org.nuclos.server.masterdata.ejb3.EntityFacadeBean"/>

	<bean id="entityObjectService" class="org.nuclos.server.common.ejb3.EntityObjectFacadeBean"/>

	<bean id="genericObjectGroupService" class="org.nuclos.server.genericobject.ejb3.GenericObjectGroupFacadeBean"/>

	<bean id="reportService" class="org.nuclos.server.report.ejb3.ReportFacadeBean"/>

	<bean id="ruleEngineService" class="org.nuclos.server.ruleengine.ejb3.RuleEngineFacadeBean">
		<property name="customCodeManager" ref="customCodeManager" />
	</bean>

	<bean id="ruleInterfaceService" class="org.nuclos.server.ruleengine.ejb3.RuleInterfaceFacadeBean"/>

	<bean id="timelimitRuleService" class="org.nuclos.server.ruleengine.ejb3.TimelimitRuleFacadeBean">
		<property name="customCodeManager" ref="customCodeManager" />
	</bean>

	<bean id="treeNodeService" class="org.nuclos.server.navigation.ejb3.TreeNodeFacadeBean"/>

	<bean id="consoleService" class="org.nuclos.server.console.ejb3.ConsoleFacadeBean"/>

	<bean id="wikiService" class="org.nuclos.server.wiki.ejb3.WikiFacadeBean"/>

	<bean id="transferService" class="org.nuclos.server.dbtransfer.TransferFacadeBean"/>

	<bean id="importService" class="org.nuclos.server.fileimport.ejb3.ImportFacadeBean"/>

	<bean id="liveSearchService" class="org.nuclos.server.livesearch.ejb3.LiveSearchFacadeBean"/>

	<bean id="schedulerControlService" class="org.nuclos.server.report.ejb3.SchedulerControlFacadeBean"/>

	<bean id="processMonitorService" class="org.nuclos.server.processmonitor.ejb3.ProcessMonitorFacadeBean"/>

	<bean id="masterDataModuleService" class="org.nuclos.server.masterdata.ejb3.MasterDataModuleFacadeBean"/>

	<bean id="jobControlService" class="org.nuclos.server.job.ejb3.JobControlFacadeBean"/>

	<bean id="ldapDataService" class="org.nuclos.server.ldap.ejb3.LDAPDataFacadeBean"/>

	<bean id="xmlExportImportProtocolService" class="org.nuclos.server.transfer.ejb3.XmlExportImportProtocolFacadeBean"/>

	<bean id="xmlExportService" class="org.nuclos.server.transfer.ejb3.XmlExportFacadeBean" depends-on="nucletDalProvider"/>

	<bean id="xmlImportService" class="org.nuclos.server.transfer.ejb3.XmlImportFacadeBean"/>

	<bean id="instanceService" class="org.nuclos.server.processmonitor.ejb3.InstanceFacadeBean"/>

	<bean id="customComponentService" class="org.nuclos.server.customcomp.ejb3.CustomComponentFacadeBean"/>

	<bean id="codeService" class="org.nuclos.server.customcode.ejb3.CodeFacadeBean"/>

	<bean id="lookupService" class="org.nuclos.server.common.ServerLocaleDelegate">
		<property name="service" ref="localeService" />
	</bean>

	<bean id="userService" class="org.nuclos.server.security.UserFacadeBean"/>

	<bean id="parameterProvider" class="org.nuclos.server.common.ServerParameterProvider" depends-on="appContext"/>

	<bean id="attributeProvider" class="org.nuclos.server.common.AttributeCache" depends-on="appContext"/>

	<bean id="masterdataMetaProvider" class="org.nuclos.server.common.MasterDataMetaCache" depends-on="appContext"/>

	<bean id="moduleProvider" class="org.nuclos.server.genericobject.Modules" depends-on="appContext"/>

	<bean id="metaDataProvider" class="org.nuclos.server.common.MetaDataServerProvider" depends-on="nucletDalProvider"/>

	<bean id="serviceLocator" class="org.nuclos.server.common.ServerServiceLocator" depends-on="appContext"/>

	<!-- Caching init on startup -->
	<bean id="nuclosCacheService" class="org.nuclos.server.mbean.NuclosCacheService" depends-on="appContext"/>


	<!-- quartz scheduler instance start -->
    <bean id="nuclosScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" depends-on="nuclosCacheService">
	    <property name="dataSource" ref="nuclosDataSource"></property>
	    <property name="nonTransactionalDataSource" ref="nuclosDataSource"></property>
	    <property name="quartzProperties">
	    	<bean class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		      <property name="location">
		      	<jee:jndi-lookup jndi-name="java:comp/env/nuclos-conf-quartz"/>
		      </property>
		    </bean>
		</property>
		<property name="applicationContextSchedulerContextKey"><value>applicationContext</value></property>
		<property name="waitForJobsToCompleteOnShutdown"><value>true</value></property>
	</bean>

  <!-- security -->

  <sec:authentication-manager alias="authenticationManager">
    <sec:authentication-provider ref='nuclosAuthenticationProvider'/>
  </sec:authentication-manager>

  <bean id="remoteAuthenticationManager" class="org.nuclos.server.security.RemoteAuthenticationManager">
    <property name="authenticationManager" ref="authenticationManager" />
    <property name="userDetailsService" ref="userDetailsService" />
  </bean>

  <bean id="nuclosAuthenticationProvider" class="org.nuclos.server.security.NuclosAuthenticationProvider">
    <property name="userDetailsService" ref="userDetailsService" />
  </bean>

  <bean id="userDetailsService" class="org.nuclos.server.security.NuclosUserDetailsService">
  	<property name="parameterProvider" ref="parameterProvider" />
  </bean>

  <bean id="sessionInvalidationFilter" class="org.nuclos.server.security.SessionInvalidationFilter" />

  <sec:global-method-security jsr250-annotations="enabled" secured-annotations="enabled" mode="aspectj"/>

  <!-- sec:http create-session="never"-->
  <sec:http create-session="always">
	<sec:http-basic/>
	<sec:intercept-url pattern="/*"/>
	<sec:session-management/>
	<sec:custom-filter ref="sessionInvalidationFilter" before="SECURITY_CONTEXT_FILTER"/>
  </sec:http>

  <!-- Initialize dal provider - since 3.1.01 -->

  <bean id="processorFactorySingleton" class="org.nuclos.server.dal.processor.ProcessorFactorySingleton" factory-method="getInstance">
  </bean>

  <bean id="jdbcEntityMetaDataProcessor" factory-bean="processorFactorySingleton" factory-method="newEntityMetaDataProcessor">
  </bean>

  <bean id="jdbcEntityFieldMetaDataProcessor" factory-bean="processorFactorySingleton" factory-method="newEntityFieldMetaDataProcessor">
  </bean>

  <bean id="genericObjectProcessor" factory-bean="processorFactorySingleton" factory-method="newEOGenericObjectProcessor">
  </bean>

  <bean id="workspaceProcessor" factory-bean="processorFactorySingleton" factory-method="newWorkspaceProcessor">
  </bean>

  <bean id="jsonEntityMetaDataProcessor" class="org.nuclos.server.dal.processor.json.impl.EntityMetaDataProcessor">
  </bean>

  <bean id="jsonEntityFieldMetaDataProcessor" class="org.nuclos.server.dal.processor.json.impl.EntityFieldMetaDataProcessor">
  </bean>

  <bean id="dynamicMetaDataProcessor" class="org.nuclos.server.dal.processor.jdbc.impl.DynamicMetaDataProcessor">
  </bean>

  <bean id="datasourceCache" class="org.nuclos.server.common.DatasourceCache" factory-method="getInstance"
  	depends-on="nucletDalProvider">
  </bean>

  <bean id="nuclosDalProvider" class="org.nuclos.server.dal.provider.NuclosDalProvider" factory-method="getInstance"
  	init-method="buildEOProcessors" depends-on="appContext">
  	<property name="entityMetaDataProcessor"><ref bean="jsonEntityMetaDataProcessor"/></property>
  	<property name="entityFieldMetaDataProcessor"><ref bean="jsonEntityFieldMetaDataProcessor"/></property>
  	<property name="dynamicMetaDataProcessor"><ref bean="dynamicMetaDataProcessor"/></property>
  </bean>

  <bean id="nucletDalProvider" class="org.nuclos.server.dal.provider.NucletDalProvider"
  	factory-method="getInstance" init-method="buildEOProcessors" depends-on="nuclosDalProvider">
  	<property name="entityMetaDataProcessor"><ref bean="jdbcEntityMetaDataProcessor"/></property>
  	<property name="entityFieldMetaDataProcessor"><ref bean="jdbcEntityFieldMetaDataProcessor"/></property>
  	<property name="genericObjectProcessor"><ref bean="genericObjectProcessor"/></property>
  	<property name="workspaceProcessor"><ref bean="workspaceProcessor"/></property>
  </bean>

</beans>
