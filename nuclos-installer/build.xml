<project name="nuclos-installer" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.3.jar" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />

	<property file="../build.properties" />
	
	<property name="postgresql.version" value="9.1.4-1" />
	<property name="tomcat.version" value="7.0.27" />

	<!-- Set default value for build.compiler (modern means javac) -->
	<property name="build.compiler" value="modern" />
	<property name="java.src.version" value="1.6" />
	<property name="java.tgt.version" value="1.6" />

	<property name="3rdparty.dir" location="${basedir}/3rdparty" />
	<property name="dist.dir" location="${basedir}/dist" />
	<property name="dist.resources.dir" location="${dist.dir}/resources" />
	<property name="dist.build.dir" location="${dist.dir}/build" />
	<property name="conf.dir" location="${basedir}/conf" />
	<property name="conf.3rdparty.dir" location="${conf.dir}/3rdparty" />
	<property name="lib.dir" location="${basedir}/lib" />

	<artifact:pom id="pom.nuclos" file="../pom.xml" />
	<artifact:pom id="pom.installer" file="pom.xml" />

	<target name="info">
		<echo message="Version ${pom.installer.version} (${pom.installer.properties.nuclos.version.date})" />
		<echo message="Java: ${java.version} (${java.vm.version})" level="info" />
		<echo message="OS: ${os.name} (${os.version}, ${os.arch})" level="info" />
		<echo message="Ant: ${ant.version}" />
	</target>

	<target name="get3rdparty">
		<echo message="Directory for third-party applications: ${3rdparty.dir}" />
		<mkdir dir="${3rdparty.dir}" />

		<get src="http://apache.org/dist/tomcat/tomcat-7/v${tomcat.version}/bin/apache-tomcat-${tomcat.version}.zip" dest="${3rdparty.dir}" skipexisting="true" />
		<get src="http://get.enterprisedb.com/postgresql/postgresql-${postgresql.version}-windows.exe" dest="${3rdparty.dir}" skipexisting="true" />
		<get src="http://get.enterprisedb.com/postgresql/postgresql-${postgresql.version}-windows-x64.exe" dest="${3rdparty.dir}" skipexisting="true" />
		<get src="http://get.enterprisedb.com/postgresql/postgresql-${postgresql.version}-linux.run" dest="${3rdparty.dir}" skipexisting="true" />
		<get src="http://get.enterprisedb.com/postgresql/postgresql-${postgresql.version}-linux-x64.run" dest="${3rdparty.dir}" skipexisting="true" />
		<get src="http://get.enterprisedb.com/postgresql/postgresql-${postgresql.version}-osx.dmg" dest="${3rdparty.dir}" skipexisting="true" />

		<checksum todir="${conf.3rdparty.dir}" algorithm="MD5" verifyproperty="3rdparty.checksum.valid">
			<fileset dir="${3rdparty.dir}" includes="apache-tomcat-${tomcat.version}.zip, postgresql-${postgresql.version}*" />
		</checksum>
		<echo message="Checksums valid: ${3rdparty.checksum.valid}" />
		<condition property="3rdpatchy.checksum.fail">
			<equals arg1="${3rdparty.checksum.valid}" arg2="false" />
		</condition>
		<fail if="3rdpatchy.checksum.fail">Checksum error</fail>
	</target>

	<target name="clean">
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="dist" />
		</delete>

		<artifact:mvn pom="../pom.xml" mavenhome="${maven.home.dir}">
			<arg value="clean" />
		</artifact:mvn>
	</target>

	<target name="prepare">
		<mkdir dir="${dist.resources.dir}" />

		<!-- build all modules including webstart -->
		<artifact:mvn pom="../pom.xml" mavenhome="${maven.home.dir}" fork="true" failonerror="true">
			<jvmarg value="-Xms256m" />
			<jvmarg value="-Xmx1024m" />
			<arg value="install" />
		</artifact:mvn>

		<mkdir dir="${dist.resources.dir}/webapp" />
		<copy todir="${dist.resources.dir}/webapp">
			<fileset dir="../nuclos-war/target/nuclos-war/">
			</fileset>
		</copy>
		<apply executable="./modjar.sh" relative="true" failifexecutionfails="true" failonerror="true">
			<arg value="${dist.resources.dir}/webapp/app"/>
			<fileset dir="${dist.resources.dir}/webapp/app">
				<include name="*.jar"/>
			</fileset>
		</apply>

		<copy todir="${dist.resources.dir}/webapp/WEB-INF">
			<fileset dir="${lib.dir}" includes="axislibs/" />
		</copy>

		<mkdir dir="${dist.resources.dir}/conf" />
		<mkdir dir="${dist.resources.dir}/data" />
		<mkdir dir="${dist.resources.dir}/data/documents" />
		<mkdir dir="${dist.resources.dir}/data/resource" />
		<mkdir dir="${dist.resources.dir}/data/expimp" />
		<mkdir dir="${dist.resources.dir}/data/codegenerator" />
		<mkdir dir="${dist.resources.dir}/data/compiled-reports" />
		<mkdir dir="${dist.resources.dir}/logs" />

		<copy todir="${dist.resources.dir}">
			<fileset dir="${conf.dir}" includes="extra/**, bin/**" excludes="" />
			<fileset file="${conf.dir}/nuclos.xml" />
		</copy>
		<!--copy todir="${dist.resources.dir}/extra">
			<fileset dir="${nuclos.doc.dir}" includes="license/**" />
			<fileset dir="${nuclos.doc.dir}/installation" includes="*.pdf" />
		</copy-->

		<!-- prepare uninstaller -->
		<fileset id="installer.dependencies" />
		<artifact:dependencies filesetId="installer.dependencies" useScope="runtime">
			<artifact:pom refid="pom.installer" />
		</artifact:dependencies>

		<mkdir dir="${dist.build.dir}" />
		<unjar overwrite="false" dest="${dist.build.dir}">
			<fileset refid="installer.dependencies" />
			<fileset file="target/nuclos-installer-${pom.installer.version}.jar" />
		</unjar>

		<copy todir="${dist.build.dir}">
			<fileset file="../nuclos-common/target/classes/nuclos-version.properties" />
		</copy>

		<jar jarfile="${dist.resources.dir}/bin/uninstaller.jar">
			<fileset dir="${dist.build.dir}" />
			<manifest>
				<attribute name="Manifest-Version" value="1.0" />
				<attribute name="Main-Class" value="org.nuclos.installer.Uninstaller" />
			</manifest>
		</jar>

		<zip destfile="${dist.dir}/resources.zip">
			<zipfileset dir="${dist.resources.dir}/" />
		</zip>

		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${dist.resources.dir}" />
		</delete>
	</target>

	<target name="jar.generic">
		<!-- Generic Installer -->
		<jar jarfile="${dist.dir}/nuclos-${pom.installer.version}-installer-generic.jar">
			<fileset dir="${dist.build.dir}" />
			<fileset file="${dist.dir}/resources.zip" />
			<fileset file="${3rdparty.dir}/apache-tomcat-${tomcat.version}.zip" />
			<manifest>
				<attribute name="Manifest-Version" value="1.0" />
				<attribute name="Main-Class" value="org.nuclos.installer.Main" />
			</manifest>
		</jar>
	</target>

	<target name="jar.win">
		<!-- Installer Windows 32 bit -->
		<jar jarfile="${dist.dir}/nuclos-${pom.installer.version}-installer-win32.jar">
			<fileset dir="${dist.build.dir}" />
			<fileset file="${dist.dir}/resources.zip" />
			<fileset file="${3rdparty.dir}/apache-tomcat-${tomcat.version}.zip" />
			<fileset file="${3rdparty.dir}/postgresql-${postgresql.version}-windows.exe" />
			<manifest>
				<attribute name="Manifest-Version" value="1.0" />
				<attribute name="Main-Class" value="org.nuclos.installer.Main" />
			</manifest>
		</jar>

		<!-- Installer Windows 64 bit -->
		<jar jarfile="${dist.dir}/nuclos-${pom.installer.version}-installer-win64.jar">
			<fileset dir="${dist.build.dir}" />
			<fileset file="${dist.dir}/resources.zip" />
			<fileset file="${3rdparty.dir}/apache-tomcat-${tomcat.version}.zip" />
			<fileset file="${3rdparty.dir}/postgresql-${postgresql.version}-windows-x64.exe" />
			<manifest>
				<attribute name="Manifest-Version" value="1.0" />
				<attribute name="Main-Class" value="org.nuclos.installer.Main" />
			</manifest>
		</jar>

		<!-- Prepare launch4j config files -->
		<copy todir="${dist.build.dir}">
			<fileset dir="${conf.dir}" includes="launch4j.xml nuclos.ico" />
		</copy>
		<replace file="${dist.build.dir}/launch4j.xml">
			<replacefilter token="@version@" value="${pom.installer.version}" />
		</replace>

		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.home.dir}/launch4j.jar:${launch4j.home.dir}/lib/xstream.jar" />

		<launch4j configFile="${dist.build.dir}/launch4j.xml" jar="${dist.dir}/nuclos-${pom.installer.version}-installer-win32.jar" outfile="${dist.dir}/nuclos-${pom.installer.version}-installer-windows32.exe" />
		<launch4j configFile="${dist.build.dir}/launch4j.xml" jar="${dist.dir}/nuclos-${pom.installer.version}-installer-win64.jar" outfile="${dist.dir}/nuclos-${pom.installer.version}-installer-windows64.exe" />

		<!-- delete temporary files /-->
		<delete file="${dist.build.dir}/launch4j.xml" />
		<delete file="${dist.dir}/nuclos-${pom.installer.version}-installer-win32.jar" />
		<delete file="${dist.dir}/nuclos-${pom.installer.version}-installer-win64.jar" />
	</target>

	<target name="jar.linux">
		<!-- Installer Linux 32 bit -->
		<jar jarfile="${dist.dir}/nuclos-${pom.installer.version}-installer-linux32.jar">
			<fileset dir="${dist.build.dir}" />
			<fileset file="${dist.dir}/resources.zip" />
			<fileset file="${3rdparty.dir}/apache-tomcat-${tomcat.version}.zip" />
			<fileset file="${3rdparty.dir}/postgresql-${postgresql.version}-linux.run" />
			<manifest>
				<attribute name="Manifest-Version" value="1.0" />
				<attribute name="Main-Class" value="org.nuclos.installer.Main" />
			</manifest>
		</jar>

		<!-- Installer Linux 64 bit -->
		<jar jarfile="${dist.dir}/nuclos-${pom.installer.version}-installer-linux64.jar">
			<fileset dir="${dist.build.dir}" />
			<fileset file="${dist.dir}/resources.zip" />
			<fileset file="${3rdparty.dir}/apache-tomcat-${tomcat.version}.zip" />
			<fileset file="${3rdparty.dir}/postgresql-${postgresql.version}-linux-x64.run" />
			<manifest>
				<attribute name="Manifest-Version" value="1.0" />
				<attribute name="Main-Class" value="org.nuclos.installer.Main" />
			</manifest>
		</jar>
	</target>

	<target name="jar.mac">
		<!-- Prepare .app -->
		<copy todir="${dist.dir}">
			<fileset dir="${conf.dir}" includes="Installer.app/**" />
		</copy>
		<replace file="${dist.dir}/Installer.app/Contents/Info.plist">
			<replacefilter token="@version@" value="${pom.installer.version}" />
		</replace>

		<!-- Installer Mac OS X -->
		<jar jarfile="${dist.dir}/Installer.app/Contents/Resources/nuclos-installer-macosx.jar">
			<fileset dir="${dist.build.dir}" />
			<fileset file="${dist.dir}/resources.zip" />
			<fileset file="${3rdparty.dir}/apache-tomcat-${tomcat.version}.zip" />
			<fileset file="${3rdparty.dir}/postgresql-${postgresql.version}-osx.dmg" />
			<manifest>
				<attribute name="Manifest-Version" value="1.0" />
				<attribute name="Main-Class" value="org.nuclos.installer.Main" />
			</manifest>
		</jar>

		<move file="${dist.dir}/Installer.app" tofile="${dist.dir}/nuclos-${pom.installer.version}-installer-osx.app">
		</move>

		<zip destfile="${dist.dir}/nuclos-${pom.installer.version}-installer-osx.app.zip">
			<zipfileset dir="${dist.dir}" includes="nuclos-${pom.installer.version}-installer-osx.app/" excludes="**/applet, **/main.scpt" />
			<zipfileset dir="${dist.dir}" includes="**/applet, **/main.scpt" filemode="755" />
		</zip>

		<!-- delete temporary files /-->
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${dist.dir}/nuclos-${pom.installer.version}-installer-osx.app" />
		</delete>
	</target>

	<target name="main.noclean" description="Build installer without clean"
		depends="info, get3rdparty, prepare, jar.generic, jar.win, jar.linux, jar.mac">
		<!-- delete temporary files /-->
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${dist.build.dir}" />
		</delete>
	</target>

	<target name="main" description="Build installer"
		depends="info, clean, get3rdparty, prepare, jar.generic, jar.win, jar.linux, jar.mac">
		<!-- delete temporary files /-->
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${dist.build.dir}" />
		</delete>
	</target>
</project>
