<project name="nucleus" default="main" basedir=".">

	<property name="app.name" value="nucleus"/>

	<!-- Project root directory (should always be the directory where this build.xml resides): -->
	<property name="project.home.dir" value="."/>

	<!-- Read all properties from the properties file: -->
	<property file="../build.properties"/>

	<property environment="env"/>

	<!-- default VM args for running the Nucleus client: -->
	<condition property="run.client.vmargs" value="-ea -ms64m -mx192m">
		<not>
			<isset property="run.client.vmargs"/>
		</not>
	</condition>

	<!-- Set the JBoss version you want to use (see XDoclet's <jboss> attribute "version"): -->
	<property name="jboss.version" value="4.0"/>

	<property name="jboss.lib.dir" value="${jboss.home}/lib"/>
	<property name="jboss.client.dir" value="${jboss.home}/client"/>

	<!-- Configuration used on JBoss to run your server. There must be a directory with the same name under "${jboss.home}/server": -->
	<property name="jboss.server.name" value="${app.name}"/>
	<property name="jboss.server.dir" value="${jboss.home}/server/${jboss.server.name}"/>
	<property name="jboss.server.deploy.dir" value="${jboss.server.dir}/deploy"/>
	<property name="jboss.server.lib.dir" value="${jboss.server.dir}/lib"/>

	<!-- Set the DataSource name your are going to use (see XDoclet's <jboss> attribute "datasource"): -->
	<property name="datasource.name" value="java:/ds/nucleus"/>

	<property name="xdoclet.lib.dir" value="${xdoclet.home}/lib"/>

	<!-- Set this to "true" when you want to force the rebuild of the XDoclet generated files (see XDoclet's <ejbdoclet> attribute "force"): -->
	<property name="xdoclet.force" value="false"/>

	<!-- Set the EJB version you want to use (see XDoclet's <ejbdoclet> attribute "ejbspec"): -->
	<property name="ejb.version" value="2.1"/>

	<property name="java.src.version" value="1.5"/>

	<!-- novabit-common directory: -->
	<property name="novabit.common.dir" value="${project.home.dir}/../common"/>
	<property name="novabit.common.src.dir" value="${novabit.common.dir}/src"/>
	<property name="novabit.common.build.deploy.dir" value="${novabit.common.dir}/build/deploy"/>

	<!-- Project subdirectories: -->
	<property name="src.dir" value="${project.home.dir}/src"/>
	<property name="src.java.dir" value="${src.dir}/java"/>
	<property name="build.dir" value="${project.home.dir}/build"/>
	<property name="build.tmp.dir" value="${build.dir}/tmp"/>
	<property name="build.classes.dir" value="${build.dir}/classes"/>
	<property name="build.deploy.dir" value="${build.dir}/deploy"/>
	<property name="build.java.dir" value="${project.home.dir}/gen"/>
	<property name="conf.dir" value="${project.home.dir}/conf"/>
	<property name="doc.dir" value="${project.home.dir}/doc"/>
	<property name="db.dir" value="${project.home.dir}/db"/>
	<property name="lib.dir" value="${project.home.dir}/lib"/>
	<property name="dist.dir" value="${project.home.dir}/dist"/>

	<!-- Source directories: -->
	<property name="src.novabit.dir" value="${src.java.dir}/de/novabit"/>
	<property name="src.nucleus.dir" value="${src.novabit.dir}/nucleus"/>
	<property name="src.nucleus.common.dir" value="${src.nucleus.dir}/common"/>
	<property name="src.nucleus.client.dir" value="${src.nucleus.dir}/client"/>
	<property name="src.nucleus.server.dir" value="${src.nucleus.dir}/server"/>

	<path id="nucleus.server.path">
		<pathelement location="${novabit.common.build.deploy.dir}/novabit-common.jar"/>
		<pathelement location="${novabit.common.build.deploy.dir}/novabit-common-ejb.jar"/>
		<pathelement location="${lib.dir}/log4j-1.2.8.jar"/>
		<pathelement location="${lib.dir}/commons-lang-2.0.jar"/>
		<pathelement location="${lib.dir}/commons-beanutils-1.5.jar"/>
		<pathelement location="${lib.dir}/commons-collections-3.0.jar"/>
		<pathelement location="${jboss.server.lib.dir}/jboss-j2ee.jar"/>
		<pathelement location="${jboss.client.dir}/jbosssx-client.jar"/>
		<pathelement location="${jboss.server.lib.dir}/jbosssx.jar"/>
		<pathelement location="${jboss.lib.dir}/jboss-system.jar"/>
		<pathelement location="${jboss.lib.dir}/jboss-common.jar"/>
		<pathelement location="${jboss.lib.dir}/jboss-jmx.jar"/>
		<pathelement location="${jboss.server.lib.dir}/jboss-common-jdbc-wrapper.jar"/>
		<pathelement location="${lib.dir}/dom4j-full.jar"/>
		<pathelement location="${lib.dir}/jasperreports-0.6.6.jar"/>
		<pathelement location="${lib.dir}/quartz-1.4.2.jar"/>
		<pathelement location="${lib.dir}/ojdbc14.jar"/>
		<pathelement location="${lib.dir}/sqljdbc.jar"/>
		<pathelement location="${lib.dir}/poi-2.5-final-20040302.jar"/>		
		<pathelement location="${jboss.client.dir}/jnp-client.jar"/>
		<pathelement location="${jboss.client.dir}/jbossmq-client.jar"/>
		<pathelement location="${jboss.client.dir}/concurrent.jar"/>
		<pathelement location="${jboss.server.lib.dir}/jboss.jar"/>
		<pathelement location="${jboss.server.lib.dir}/mail.jar"/>
		<pathelement location="${lib.dir}/junit-3.8.1.jar"/>
		<pathelement location="${jboss.lib.dir}/endorsed/xercesImpl.jar"/>
	</path>

	<path id="nucleus.client.path">
		<pathelement location="${build.deploy.dir}/novabit-common.jar"/>
		<pathelement location="${novabit.common.dir}/lib/client/jlfgr-1_0.jar"/>
		<pathelement location="${lib.dir}/commons-lang-2.0.jar"/>
		<pathelement location="${lib.dir}/commons-beanutils-1.5.jar"/>
		<pathelement location="${lib.dir}/commons-collections-3.0.jar"/>
		<pathelement location="${lib.dir}/commons-logging-1.0.4.jar"/>
		<pathelement location="${jboss.client.dir}/jboss-j2ee.jar"/>
		<pathelement location="${jboss.client.dir}/jboss-client.jar"/>
		<pathelement location="${jboss.client.dir}/jboss-common-client.jar"/>
		<pathelement location="${jboss.client.dir}/jboss-system-client.jar"/>
		<pathelement location="${jboss.client.dir}/jbosssx-client.jar"/>
		<pathelement location="${jboss.client.dir}/jboss-transaction-client.jar"/>
		<pathelement location="${jboss.client.dir}/jbossmq-client.jar"/>
		<pathelement location="${jboss.client.dir}/concurrent.jar"/>
		<pathelement location="${lib.dir}/InsaPerformanceLogger.jar"/>
		<pathelement location="${lib.dir}/jdbc2_0-stdext.jar"/>
		<pathelement location="${lib.dir}/jh.jar"/>
		<pathelement location="${jboss.client.dir}/jnp-client.jar"/>
		<pathelement location="${lib.dir}/log4j-1.2.8.jar"/>
		<pathelement location="${lib.dir}/dom4j-full.jar"/>
		<pathelement location="${lib.dir}/xercesImpl.jar"/>
		<pathelement location="${lib.dir}/xmlParserAPIs.jar"/>
		<pathelement location="${lib.dir}/poi-2.5-final-20040302.jar"/>
		<pathelement location="${lib.dir}/jasperreports-0.6.6.jar"/>
		<pathelement location="${lib.dir}/jawin.jar"/>
		<pathelement location="${lib.dir}/jxl.jar"/>
		<pathelement location="${lib.dir}/sqljdbc.jar"/>
		
		<pathelement location="${lib.dir}/davfilechooser.jar"/>
		<pathelement location="${lib.dir}/thirdparty.jar"/>
		<pathelement location="${lib.dir}/StrutLayout1.2.1.jar"/>
		
		<pathelement location="${build.deploy.dir}/${app.name}-xerlin.jar"/>
	</path>

	<path id="nucleus.path">
		<path refid="nucleus.server.path"/>
		<path refid="nucleus.client.path"/>
	</path>

	<path id="nucleus.client.run.path">
		<pathelement location="${build.deploy.dir}/${app.name}-client.jar"/>
		<!-- include conf.dir in classpath so the ClassLoader finds nucleus-client.properties: -->
		<pathelement location="${conf.dir}"/>
		<pathelement location="${build.deploy.dir}/${app.name}-help.jar"/>

		<path refid="nucleus.client.path"/>
	</path>

	<path id="cactus.path">
		<pathelement location="${lib.dir}/cactus-1.7.1.jar"/>
		<pathelement location="${lib.dir}/cactus-ant-1.7.1.jar"/>
		<pathelement location="${lib.dir}/commons-httpclient-2.0.2.jar"/>
		<pathelement location="${lib.dir}/commons-logging-1.0.4.jar"/>
		<pathelement location="${lib.dir}/aspectjrt-1.2.1.jar"/>
		<pathelement location="${lib.dir}/cargo-0.5.jar"/>
		<!-- junit is needed for cactus, but as it seems it must be available for the parent classloader - why? -->
		<pathelement location="${lib.dir}/junit-3.8.1.jar"/>
	</path>

	<taskdef name="ejbdoclet" classname="xdoclet.modules.ejb.EjbDocletTask">
		<classpath>
			<path refid="nucleus.server.path"/>
			<fileset dir="${xdoclet.lib.dir}" includes="*.jar"/>
		</classpath>
	</taskdef>

	<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
		<classpath>
			<pathelement location="${lib.dir}\fop.jar"/>
			<pathelement location="${lib.dir}\avalon-framework.jar"/>
			<pathelement location="${lib.dir}\batik.jar"/>
		</classpath>
	</taskdef>

	<target name="init" depends="check.build.properties">
		<copy file="${conf.dir}/novabit/log4j-client-template.xml" tofile="${conf.dir}/log4j.xml" overwrite="false"/>
		<copy file="${conf.dir}/novabit/nucleus-client-template.properties"
					tofile="${conf.dir}/nucleus-client-properties" overwrite="false"/>
		<available property="jboss.present" file="${jboss.home}/bin/run.jar"/>
		<antcall target="wrong.jboss"/>
		<available property="xdoclet.present" file="${xdoclet.home}/lib/xdoclet-1.3-08012006-lunatech.jar"/>
		<antcall target="wrong.xdoclet"/>
	</target>

	<target name="check.build.properties" depends="check.jboss.home, check.xdoclet.home, check.docbook-xsl.home"/>

	<!-- path to the runtime JBoss directory containing the JBoss application server: -->
	<target name="check.jboss.home" unless="jboss.home">
		<fail>
			Property "jboss.home" is not set. Please use the file "build.properties" to set this property.
			It must point to the directory which contains the following directory: "deploy", "conf", "tmp" etc.
		</fail>
	</target>

	<!-- path to the root directory of the XDoclet distribution (see http://www.sf.net/projects/xdoclet): -->
	<target name="check.xdoclet.home" unless="xdoclet.home">
		<fail>Property "xdoclet.home" is not set. Please check your build.properties file.</fail>
	</target>

	<!-- path to the root directory of the docbook-xsl distribution: -->
	<target name="check.docbook-xsl.home" unless="docbook-xsl.home">
		<fail>Property "docbook-xsl.home" is not set. Please check your build.properties file.</fail>
	</target>

	<target name="wrong.jboss" unless="jboss.present">
		<fail>
			Property "jboss.home" is set but it does not seem to point to the right directory. The file "run.jar" must be
			available at ${jboss.home}/bin.
		</fail>
	</target>

	<target name="wrong.xdoclet" unless="xdoclet.present">
		<fail>
			Property "xdoclet.home" is set, but it does not seem to point to the right directory. The file "xdoclet-1.2.3.jar"
			must be available at ${xdoclet.home}/lib.
		</fail>
	</target>
	
	<target name="main" depends="main.nojavahelp, jar.javahelp"
					description="Performs a clean, builds and deploys the server, then builds the client and javahelp."/>

	<target name="main.nojavahelp" depends="init, clean, main.noclean"
					description="Performs a clean, builds and deploys the server, then builds the client."/>

	<target name="main.noclean" depends="build.noclean, deploy.server, deploy.client"
					description="Builds and deploys the server, then builds the client."/>

	<target name="build.noclean" depends="build.novabit.common.noclean, jar.server, compile.client"
					description="Builds the server, then builds the client."/>

	<target name="build.novabit.common.noclean">
		<ant dir="${novabit.common.dir}" target="main.noclean" inheritall="false"/>
	</target>

	<target name="xdoclet.generate.all">
		<ejbdoclet destdir="${build.java.dir}" ejbspec="${ejb.version}" verbose="false">
			<fileset dir="${src.java.dir}">
				<include name="de/novabit/nucleus/server/**/ejb/*Bean.java"/>
			</fileset>
			<packageSubstitution packages="ejb" substituteWith="interfaces"/>
			<remoteinterface pattern="{0}Remote"/>
			<homeinterface pattern="{0}RemoteHome"/>
			<localinterface/>
			<localhomeinterface/>
			<deploymentdescriptor destdir="${build.classes.dir}/META-INF"/>

			<jboss version="${jboss.version}" createTable="false" removeTable="false" xmlencoding="UTF-8"
				datasource="${datasource.name}" destdir="${build.classes.dir}/META-INF"
						 validateXml="false" mergedir="./merge"/>
		</ejbdoclet>
	</target>

	<target name="compile" depends="init, compile.client"/>

	<target name="compile.server" depends="init, xdoclet.generate.all, compile.server.nodepend"/>

	<target name="compile.server.nodepend">
		<mkdir dir="${build.classes.dir}"/>

		<copy todir="${build.classes.dir}">
			<fileset dir="${src.java.dir}" includes="de/novabit/nucleus/common/security/auth.conf"/>
			<fileset dir="${src.java.dir}" includes="de/novabit/nucleus/common/querybuilder/querybuildermodel.dtd"/>
			<fileset dir="${conf.dir}" includes="nucleus-app*.properties"/>
		</copy>

		<javac destdir="${build.classes.dir}" source="${java.src.version}" debug="on" deprecation="off" optimize="on"
					 srcdir="${src.java.dir}:${build.java.dir}"
					 includes="de/novabit/nucleus/common/, de/novabit/nucleus/server/"
					 excludes="**/test/"
					 classpathref="nucleus.server.path">
		</javac>
	</target>

	<target name="compile.client" depends="compile.server, patch.xerlin.jar, compile.client.nodepend"/>

	<target name="patch.xerlin.jar"
					description="Patches the xerlin library (Nucleus uses a custom merlot.properties file).">
		<copy file="${lib.dir}/Xerlin-1.3-patched.jar" tofile="${build.deploy.dir}/${app.name}-xerlin.jar"/>
		<jar jarfile="${build.deploy.dir}/${app.name}-xerlin.jar" update="true" basedir="${conf.dir}/xerlin"
				 includes="org/merlotxml/merlot/merlot.properties"/>
	</target>

	<target name="compile.client.nodepend">
		<mkdir dir="${build.classes.dir}"/>
		<mkdir dir="${build.deploy.dir}"/>

		<copy todir="${build.deploy.dir}">
			<fileset dir="${novabit.common.build.deploy.dir}" includes="novabit-common.jar"/>
		</copy>

		<copy todir="${build.classes.dir}">
			<fileset dir="${src.java.dir}"
							 includes="de/novabit/nucleus/common/security/auth.conf,
							 de/novabit/nucleus/common/querybuilder/querybuildermodel.dtd"/>
		</copy>

		<copy todir="${build.classes.dir}/de/novabit/nucleus/client">
			<fileset dir="${src.nucleus.client.dir}"
							 includes="**/images/,
							 **/layoutml/*.layoutml,
							 help/releasenotes/releasenotes.html"/>
		</copy>

		<copy todir="${build.classes.dir}/de/novabit/nucleus/client/gef">
			<fileset dir="${src.java.dir}/de/novabit/nucleus/client/gef" includes="**/images/*"/>
		</copy>

		<copy todir="${build.classes.dir}/de/novabit/nucleus/client/report">
			<fileset dir="${src.java.dir}/de/novabit/nucleus/client/report" includes="*.dtd"/>
		</copy>

		<copy file="${novabit.common.src.dir}/de/novabit/common/layoutml/layoutml.dtd" tofile="${conf.dir}/layoutml.dtd"
					overwrite="true"/>

		<javac destdir="${build.classes.dir}" debug="on" deprecation="off" optimize="on"
					 source="${java.src.version}" srcdir="${src.java.dir}"
					 includes="de/novabit/nucleus/client/"
					 excludes="**/test/">
			<classpath>
				<!-- @todo the ref to nucleus-server.jar slows the build down.
				  When we have nucleus-common.jar and nucleus-server-interface.jar, we should try this again. -->
				<!--<pathelement location="${build.deploy.dir}/nucleus-server.jar"/>-->
				<path refid="nucleus.client.path"/>
			</classpath>
		</javac>
	</target>

	<target name="jar.server" depends="compile.server, jar.jboss" description="Builds the server.">
		<mkdir dir="${build.deploy.dir}"/>

		<jar jarfile="${build.deploy.dir}/${app.name}-server.jar" basedir="${build.classes.dir}"
				 includes="de/novabit/nucleus/common/, de/novabit/nucleus/server/, META-INF/,
				 nucleus-app*.properties"
				 excludes="**/test/">
			<manifest>
				<attribute name="Manifest-Version" value="1.0"/>
				<attribute name="Class-Path" value="./novabit-common.jar ./novabit-common-ejb.jar ./quartz-1.4.2.jar"/>
			</manifest>
		</jar>
	</target>

	<target name="deploy.client" depends="compile.client" description="Builds the client.">
		<mkdir dir="${build.deploy.dir}"/>

		<jar jarfile="${build.deploy.dir}/${app.name}-client.jar">
			<fileset dir="${build.classes.dir}"
							 includes="de/novabit/nucleus/client/,
					de/novabit/nucleus/common/,
					de/novabit/nucleus/server/*.class,
					de/novabit/nucleus/server/*/*.class,
					de/novabit/nucleus/server/database/**/*.class,
					de/novabit/nucleus/server/**/valueobject/*,
					de/novabit/nucleus/server/**/interfaces/*,
					de/novabit/nucleus/server/**/*Exception.class,
					de/novabit/nucleus/server/**/*VO*.class,
					de/novabit/nucleus/server/genericobject/searchcondition/Collectable*SearchExpression.class,
					de/novabit/nucleus/server/navigation/treenode/*.class,
					de/novabit/nucleus/server/person/treenode/*.class,
					de/novabit/nucleus/common/security/auth.conf"
							 excludes="**/test/,
					de/novabit/**/ejb/**/*Bean.class,
					de/novabit/nucleus/client/help/javahelp/,
					de/novabit/nucleus/client/main/animatedmenubar/,
					de/novabit/**/build.xml"/>
		</jar>
	</target>

	<target name="jar.jboss" description="Creates jboss specific libraries.">
		<mkdir dir="${build.deploy.dir}"/>

		<javac destdir="${build.classes.dir}" source="${java.src.version}" debug="on" deprecation="off" optimize="on"
					 excludes="de/novabit/common/logging/test/"
					 classpathref="nucleus.path">
			<src path="${novabit.common.src.dir}/de/novabit/common/logging/"/>
		</javac>

		<jar jarfile="${build.deploy.dir}/novabit-jboss.jar" basedir="${build.classes.dir}"
				 includes="de/novabit/common/logging/"
				 excludes="de/novabit/common/logging/test/">
		</jar>
		
		<copy todir="${jboss.server.lib.dir}">
			<fileset dir="${build.deploy.dir}" includes="novabit-jboss.jar"/>
		</copy>
	</target>

	<target name="deploy.server" depends="jar.server,package.server,deploy.to.server" description="Builds and deploys the server."/>
	
	<target name="package.server" description="Builds the server.">
		<ear destfile="${build.deploy.dir}/${app.name}.ear" appxml="${conf.dir}/jboss/ear/META-INF/application.xml">
			<!--			<fileset dir="${conf.dir}/jboss/ear" includes="META-INF/jboss-app.xml, scheduler-service.xml"/>-->
			<fileset dir="${build.deploy.dir}" includes="${app.name}-server.jar"/>
			<fileset dir="${novabit.common.build.deploy.dir}" includes="novabit-common.jar, novabit-common-ejb.jar"/>
			<fileset dir="${lib.dir}" includes="quartz-1.4.2.jar"/>
		</ear>
	</target>
	
	<target name="deploy.to.server" description="copys the build result to server deploy directory">
		<!-- deploy: -->
		<copy todir="${jboss.server.deploy.dir}">
			<fileset dir="${build.deploy.dir}" includes="${app.name}.ear"/>
			<fileset dir="${conf.dir}/jboss/deploy"
							 includes="deploy.last/quartz-service.xml, jms/nucleus-destinations-service.xml"/>
		</copy>

		<!-- quartz-service.xml must be renewed, otherwise it won't be redeployed on hot deployment: -->
		<touch>
			<fileset dir="${jboss.server.deploy.dir}/deploy.last"/>
		</touch>
	</target>
	
	<!-- Target to start the JBoss server: -->
	<target name="run.server">
		<exec executable="run.bat" dir="${jboss.home}/bin" vmlauncher="false">
			<arg line="-c nucleus"/>
		</exec>
	</target>

	<!-- Target to start the JBoss server in debugging mode: -->
	<target name="debug.server">
		<exec executable="run.bat" dir="${jboss.home}/bin" vmlauncher="false">
			<arg line="-c ${jboss.server.name}"/>
			<env key="JAVA_OPTS"
					 value="${env.JAVA_OPTS} -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"/>
		</exec>
	</target>

	<!-- Target to run client -->
	<target name="run.client" depends="deploy.client, run.client.nodepend"
					description="Compiles the server and client, then runs the client."/>

	<!-- Target to run client (contains no dependencies, just run the client) -->
	<target name="run.client.nodepend" description="Runs the Nucleus client.">
		<java classname="de.novabit.nucleus.client.main.Main" fork="true">
			<classpath>
				<path refid="nucleus.client.run.path"/>
			</classpath>
			<jvmarg line="${run.client.vmargs}"/>
			<sysproperty key="nucleus.client.conf.dir" value="${conf.dir}"/>
			<sysproperty key="com.sun.management.jmxremote" value="true"/>
		</java>
	</target>

	<target name="run.console" description="Runs the Nucleus console.">
		<java classname="de.novabit.nucleus.client.console.NucleusConsole" fork="true">
			<arg line="${console-args}"/>
			<classpath>
				<path refid="nucleus.client.run.path"/>
			</classpath>
			<sysproperty key="nucleus.client.conf.dir" value="${conf.dir}"/>
		</java>
	</target>

	<target name="echo.classpath.windows" description="Prints the current classpath to System.out.">
		<pathconvert refid="nucleus.client.run.path" targetos="windows" property="nucleus.client.run.path.windows"/>
		<echo message="${nucleus.client.run.path.windows}" level="debug"/>
	</target>

	<target name="show.serialver" description="Runs the UI version of the serialver tool with the current classpath.">
		<pathconvert refid="nucleus.client.run.path" property="nucleus.client.run.path.os"/>
		<exec executable="serialver">
			<arg line="-classpath ${nucleus.client.run.path.os} -show"/>
		</exec>
	</target>

	<target name="clean" depends="clean.javadoc, clean.ruledoc, dist.clean" description="Removes all generated files.">
		<ant dir="${novabit.common.dir}" target="clean" inheritall="false"/>

		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${src.java.dir}"
							 includes="**/interfaces/"
							 excludes="pending/,
					de/novabit/nucleus/server/masterdata/interfaces/MDLocalHome.java,
					de/novabit/nucleus/server/masterdata/interfaces/MDLocalObject.java"/>
			<fileset dir="${build.dir}" includes="*/"/>
			<fileset dir="${conf.dir}" includes="layoutml.dtd"/>
		</delete>
	</target>

	<target name="clean.javadoc">
		<delete quiet="true" dir="${doc.dir}/api"/>
	</target>

	<target name="clean.ruledoc">
		<delete quiet="true" dir="${doc.dir}/ruledoc"/>
	</target>

	<target name="compile.ruledoc.taglets">
		<javac destdir="${build.classes.dir}" debug="on" deprecation="off" optimize="on"
					 source="${java.src.version}" srcdir="${src.java.dir}"
					 includes="de/novabit/nucleus/tools/ruledoc/"/>
	</target>

	<target name="build.ruledoc" depends="init, compile.ruledoc.taglets" description="@todo compile rule sources">
		<javadoc access="private" additionalparam="-quiet
		-d ${doc.dir}/ruledoc
		-taglet de.novabit.nucleus.tools.ruledoc.taglet.NameTaglet  -tagletpath ${build.classes.dir}
		-taglet de.novabit.nucleus.tools.ruledoc.taglet.BeschreibungTaglet -tagletpath ${build.classes.dir}
		-taglet de.novabit.nucleus.tools.ruledoc.taglet.VerwendungTaglet -tagletpath ${build.classes.dir}
		-taglet de.novabit.nucleus.tools.ruledoc.taglet.AnderungTaglet -tagletpath ${build.classes.dir}
		-linksource"

						 classpath="${build.classes.dir}; ${novabit.common.dir}/build/classes"
						 windowtitle="Nucleus Regeln"
						 sourcefiles="${codegenerator.source}/*.java"
						 sourcepath="${codegenerator.source};${src.novabit.dir}">

			<doclet name="de.novabit.nucleus.tools.ruledoc.doclet.NovabitDoclet"
							path="${build.classes.dir}"/>
		</javadoc>
	</target>

	<target name="javadoc" description="Builds the javadoc.">
		<copy todir="${doc.dir}/api">
			<fileset dir="${novabit.common.src.dir}/de/novabit/common/ui/images" includes="novabit-150x45.gif"/>
		</copy>
		<javadoc destdir="${doc.dir}/api" source="${java.src.version}" maxmemory="128m" access="protected" splitindex="true"
						 version="true" author="true" use="true" windowtitle="Nucleus API Documentation">
			<doctitle>Nucleus API Documentation</doctitle>
			<header>
				<![CDATA[<img src="{@docRoot}/novabit-150x45.gif">]]></header>
			<tag name="invariant" description="Invariants:"/>
			<tag name="precondition" description="Preconditions:" scope="constructors,methods"/>
			<tag name="postcondition" description="Postconditions:" scope="constructors,methods"/>
			<tag name="todo" description="To do:"/>
			<tag name="beaninfo" description="@beaninfo"/>
			<tag name="ejb.bean" description="@ejb.bean" scope="types"/>
			<tag name="ejb.home" description="@ejb.home"/>
			<tag name="ejb.interface" description="@ejb.interface"/>
			<tag name="ejb.finder" description="@ejb.finder"/>
			<tag name="ejb.persistence" description="@ejb.persistence" scope="types, methods"/>
			<tag name="ejb.transaction" description="@ejb.transaction" scope="types, methods"/>
			<tag name="ejb.create-method" description="@ejb.create-method" scope="methods"/>
			<tag name="ejb.interface-method" description="@ejb.interface-method" scope="methods"/>
			<tag name="ejb.permission" description="@ejb.permission"/>
			<tag name="ejb.pk" description="Primary key"/>
			<tag name="ejb.security-identity" description="@ejb.security-identity"/>
			<tag name="event-dispatch-thread" description="@event-dispatch-thread"/>
			<tag name="xdoclet-generated" description="@xdoclet-generated"/>
			<tag name="jboss.persistence" description="@jboss.persistence"/>
			<tag name="jboss.read-ahead" description="@jboss.read-ahead"/>
			<tag name="jboss.entity-command" description="@jboss.entity-command"/>
			<tag name="jboss.entity-command-attribute" description="@jboss.entity-command-attribute"/>
			<tag name="jboss.security-proxy" description="@jboss.security-proxy"/>
			<tag name="jboss.query" description="@jboss.query"/>

			<sourcepath>
				<pathelement location="${novabit.common.src.dir}"/>
				<pathelement location="${src.java.dir}"/>
			</sourcepath>
			<packageset dir="${novabit.common.src.dir}" excludes="de/novabit/**/test/**, de/novabit/**/interfaces/**"/>
			<packageset dir="${src.java.dir}"
									excludes="de/novabit/**/test/**, de/novabit/nucleus/tools/**, de/novabit/**/interfaces/**"/>
			<classpath>
				<path refid="nucleus.path"/>
			</classpath>
		</javadoc>
	</target>

	<target name="jar.javahelp"
					description="Builds javahelp online documentation from docbook sources and puts them in a jar.">
		<antcall target="compile.javahelp"/>

		<!-- copy images: -->
		<copy todir="${build.classes.dir}/de/novabit/nucleus/client/help/javahelp">
			<fileset dir="${doc.dir}/usermanual/src" includes="img/"/>
		</copy>

		<antcall target="jar.javahelp.nodepend"/>
	</target>

	<target name="compile.javahelp" description="Compiles javahelp online documentation from docbook sources.">
		<xslt basedir="${doc.dir}/usermanual/src"
					destdir="${build.classes.dir}/de/novabit/nucleus/client/help/javahelp"
					style="${docbook-xsl.home}/javahelp/javahelp.xsl"
					includes="nucleus.xml">
			<!--factory name="org.apache.xalan.processor.TransformerFactoryImpl"/-->
			<classpath>
				<pathelement location="${lib.dir}/xalan.jar"/>
				<pathelement location="${lib.dir}/serializer.jar"/>
			</classpath>
		</xslt>

		<!-- nucleus.html is 0 bytes and disturbs the jhindexer, so remove it: -->
		<delete quiet="true" file="${build.classes.dir}/de/novabit/nucleus/client/help/javahelp/nucleus.html"/>

		<antcall target="compile.javahelp.index"/>
	</target>

	<target name="compile.javahelp.index" depends="clean.javahelp.index">
		<java classname="com.sun.java.help.search.Indexer" fork="true"
					dir="${build.classes.dir}/de/novabit/nucleus/client/help/javahelp">
			<arg line="-locale de_DE"/>
			<arg value="."/>
			<classpath>
				<pathelement location="${lib.dir}/jsearch.jar"/>
			</classpath>
		</java>
	</target>

	<target name="clean.javahelp.index">
		<delete quiet="true" dir="${build.classes.dir}/de/novabit/nucleus/client/help/javahelp/JavaHelpSearch"/>
	</target>

	<target name="jar.javahelp.nodepend">
		<jar jarfile="${build.deploy.dir}/nucleus-help.jar">
			<fileset dir="${build.classes.dir}" includes="de/novabit/nucleus/client/help/javahelp/"/>
		</jar>
	</target>

	<target name="compile.datasourcedoc" description="Compiles datasource documentation from docbook sources.">
		<!-- @todo doesn't compile - eliminate if no longer needed -->
		<copy todir="${docbook-xsl.home}/fo/">
			<fileset dir="${doc.dir}/usermanual/src/" includes="Datenquellen.xsl"/>
		</copy>

		<xslt basedir="${doc.dir}/usermanual/src"
					destdir="${doc.dir}/usermanual"
					extension=".fo"
					style="${docbook-xsl.home}/fo/Datenquellen.xsl"
					includes="Datenquellen.xml">
			<param name="page.orientation" expression="'landscape'"/>
		</xslt>

		<delete file="${docbook-xsl.home}/fo/Datenquellen.xsl"/>

		<fop fofile="${doc.dir}/usermanual/Datenquellen.fo"
				 outfile="${doc.dir}/usermanual/Datenquellen.pdf"
				 format="application/pdf"/>
	</target>

	<target name="build.cactus">
		<taskdef resource="cactus.tasks">
			<classpath refid="cactus.path"/>
		</taskdef>

		<mkdir dir="${build.classes.dir}"/>
		<javac destdir="${build.classes.dir}" source="${java.src.version}" debug="on" deprecation="off" optimize="on"
					 srcdir="${src.java.dir}"
					 includes="de/novabit/**/test/" excludes="de/novabit/nucleus/client/">
			<classpath>
				<path refid="nucleus.server.path"/>
				<path location="${novabit.common.dir}/build/classes"/>
				<path location="${lib.dir}/jfcunit.jar"/>
				<path location="${lib.dir}/cactus-1.7.1.jar"/>
				<path location="${lib.dir}/servlet.jar"/>
			</classpath>
		</javac>

		<touch file="${conf.dir}/cactus/web.xml"/>

		<war destfile="${build.deploy.dir}/nucleus-test-temp.war" webxml="${conf.dir}/cactus/web.xml">
			<!--			manifest="${conf.dir}/cactus/MANIFEST.MF">-->
			<!--			<classes dir="${build.classes.dir}" includes="de/novabit/**/test/*"/>-->
			<classes dir="${build.classes.dir}"
							 includes="de/novabit/**/test/,
 					de/novabit/common/security/,
					de/novabit/nucleus/common/security/,
					de/novabit/nucleus/server/common/security/auth.conf"/>
		</war>

		<cactifywar destfile="${build.deploy.dir}/nucleus-test.war" srcfile="${build.deploy.dir}/nucleus-test-temp.war"/>

		<ear destfile="${build.deploy.dir}/nucleus-test.ear" appxml="${conf.dir}/cactus/application.xml"
				 basedir="${build.deploy.dir}" includes="nucleus-test.war"/>
	</target>

	<target name="deploy.cactus" depends="build.cactus">
		<copy todir="${jboss.server.deploy.dir}">
			<fileset dir="${build.deploy.dir}" includes="nucleus-test.war"/>
		</copy>
	</target>

	<target name="run.cactus" depends="deploy.cactus">
		<!-- wait for the server to deploy -->
		<sleep seconds="5"/>

		<junit printsummary="withOutAndErr" showoutput="on" filtertrace="off">
			<classpath>
				<path location="${build.classes.dir}"/>
				<path refid="nucleus.path"/>
				<path refid="cactus.path"/>
			</classpath>
			<sysproperty key="cactus.contextURL" value="http://localhost:8080/nucleus-test"/>
			<sysproperty key="cactus.servletRedirectorName" value="ServletRedirectorSecure"/>
			<formatter type="plain" usefile="false"/>
			<!--			<test name="de.novabit.common.collect.collectable.test.CollectableFieldFormatTest"/>-->
			<test name="de.novabit.nucleus.server.genericobject.searchcondition.test.SearchExpressionUnparserTest"/>
			<test name="de.novabit.nucleus.server.genericobject.searchcondition.test.DummyTest"/>
		</junit>
	</target>

	<!--  -->
	<target name="dist" depends="main, javadoc, build.ruledoc" description="copy files to distribution directory.">
		<mkdir dir="${dist.dir}"/>

		<!-- copy .ear to server directory: -->
		<mkdir dir="${dist.dir}/server/deploy"/>
		<copy todir="${dist.dir}/server/deploy">
			<fileset dir="${build.deploy.dir}" includes="${app.name}.ear"/>
		</copy>

		<!-- copy server config -->
		<mkdir dir="${dist.dir}/server/conf"/>
		<copy todir="${dist.dir}/server/conf">
			<fileset dir="${conf.dir}/jboss/conf" includes="log4j.xml"/>
		</copy>

		<!-- copy client config: -->
		<mkdir dir="${dist.dir}/client"/>
		<copy todir="${dist.dir}/client">
			<fileset dir="${conf.dir}/eplus" includes="*.bat"/>
		</copy>
		<mkdir dir="${dist.dir}/client/conf"/>
		<copy todir="${dist.dir}/client/conf">
			<fileset dir="${conf.dir}/eplus" includes="log4j.xml"/>
			<fileset dir="${conf.dir}" includes="jndi.properties, layoutml.dtd, nucleus-app.properties"/>
		</copy>
		<mkdir dir="${dist.dir}/client/conf/doc"/>
		<copy todir="${dist.dir}/client/conf/doc">
			<fileset dir="${build.classes.dir}/de/novabit/nucleus/client/help/releasenotes" includes="releasenotes.html"/>
		</copy>
		<mkdir dir="${dist.dir}/client/conf/icons"/>
		<copy todir="${dist.dir}/client/conf/icons">
			<fileset dir="${conf.dir}/icons" includes="*.png"/>
		</copy>

		<!-- copy client libs: -->
		<mkdir dir="${dist.dir}/client/lib"/>
		<copy todir="${dist.dir}/client/lib">
			<fileset dir="${build.deploy.dir}" includes="*.jar" excludes="${app.name}-server.jar, novabit-jboss.jar"/>
		</copy>

		<!-- copy layouts: -->
		<mkdir dir="${dist.dir}/client/layoutml"/>
		<copy todir="${dist.dir}/client/layoutml">
			<fileset dir="${src.dir}/layoutml" excludes="Test-Modul.layoutml"/>
			<fileset dir="${src.dir}/layoutml"/>
		</copy>

		<!-- copy rules: -->
		<!--
		<mkdir dir="${dist.dir}/client/rules"/>
		<copy todir="${dist.dir}/client/rules">
			<fileset dir="${src.dir}/rules"/>
		</copy>
		-->
		<!-- copy reports/datasources: -->
		<!--
		<mkdir dir="${dist.dir}/client/reports"/>
		<copy todir="${dist.dir}/client/reports">
			<fileset dir="${src.dir}/reports"/>
		</copy>
		-->
		
		<!-- copy server libs: -->
		<mkdir dir="${dist.dir}/server/lib"/>
		<copy todir="${dist.dir}/server/lib">
			<fileset dir="${build.deploy.dir}" includes="novabit-jboss.jar"/>
		</copy>

		<!-- copy db script(s): -->
		<mkdir dir="${dist.dir}/scripts"/>
		<copy todir="${dist.dir}/scripts">
			<fileset dir="${db.dir}" excludes="von_eplus/, utils/"/>
		</copy>

		<!-- zip sources: -->
		<zip destfile="${dist.dir}/source.zip">
			<fileset dir="${project.home.dir}" includes="build.*, src/" excludes="CVS"/>
			<fileset dir="${novabit.common.dir}" includes="src/" excludes="CVS"/>
		</zip>

		<!-- zip documentation: -->
		<zip destfile="${dist.dir}/doc.zip">
			<fileset dir="${doc.dir}/systemdokumentation" includes="*.pdf, index.htm, DB-Schema*/, include/, Licenses/"
							 excludes="DB-Schema.vsd, CSV"/>
			<zipfileset dir="${doc.dir}/api" prefix="javadoc"/>
		</zip>
	</target>

	<target name="dist.clean" description="remove distribution directory.">
		<delete quiet="true" dir="${dist.dir}"/>
	</target>
	
	<target name="war.webstart" description="Builds the webstart-client." depends="jar.server,deploy.client">	
		<!-- unjar libraries to sign them later -->
		<unjar overwrite="false" src="${lib.dir}/xalan.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/commons-beanutils-1.5.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/commons-lang-2.0.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/commons-beanutils-1.5.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/commons-collections-3.0.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/commons-logging-1.0.4.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/jdbc2_0-stdext.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/jh.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/log4j-1.2.8.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/StrutLayout1.2.1.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/thirdparty.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/dom4j-full.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/xercesImpl.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/xmlParserAPIs.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/davfilechooser.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/itext-1.3.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/poi-2.5-final-20040302.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/jasperreports-0.6.6.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/jawin.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${lib.dir}/jxl.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${jboss.client.dir}/jboss-j2ee.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${jboss.client.dir}/jboss-client.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${jboss.client.dir}/jboss-common-client.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${jboss.client.dir}/jboss-system-client.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${jboss.client.dir}/jbosssx-client.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${jboss.client.dir}/jboss-transaction-client.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${jboss.client.dir}/jbossmq-client.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${jboss.client.dir}/concurrent.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${jboss.client.dir}/jnp-client.jar" dest="${build.classes.dir}"/>
		<unjar overwrite="false" src="${novabit.common.dir}/lib/client/jlfgr-1_0.jar" dest="${build.classes.dir}"/>
				
		<delete dir="${build.classes.dir}/META-INF"/>
		<jar jarfile="${build.deploy.dir}/${app.name}-libs.jar">
			<fileset dir="${build.classes.dir}" excludes="de/novabit/**"/>
		</jar>
		
		<!-- jar native libs -->
		<jar destfile="${build.deploy.dir}/${app.name}-native.jar">
			<fileset dir="${lib.dir}">
				<include name="jawin.dll"/>
			</fileset>
		</jar>
		
		<!-- create folder structure for war -->
		<mkdir dir="${build.deploy.dir}/plugins"/>
		<jar jarfile="${build.deploy.dir}/plugins/layoutml-plugin.jar" basedir="${conf.dir}/xerlin/plugins/"/>
			
		<copy overwrite="true" todir="${build.deploy.dir}/webstart/app">
			<fileset dir="${build.deploy.dir}">
				<include name="${app.name}-client.jar"/>
				<include name="novabit-common.jar"/>
				<include name="${app.name}-xerlin.jar"/>
				<include name="${app.name}-libs.jar"/>
				<include name="${app.name}-native.jar"/>
				<include name="plugins/layoutml-plugin.jar"/>
			</fileset>
		</copy>
		
		<copy overwrite="true" todir="${build.deploy.dir}/webstart">
			<fileset dir="${conf.dir}/webstart">
				<exclude name="WEB-INF/web.xml"/>
			</fileset>
		</copy>
		<copy overwrite="true" todir="${build.deploy.dir}/conf">
			<fileset dir="${conf.dir}">
				<include name="jndi.properties"/>
				<include name="nucleus-app.properties"/>
				<include name="nucleus-client.properties"/>
				<include name="log4j.xml"/>
				<include name="layoutml.dtd"/>
				<include name="icons/"/>
				<include name="doc/"/>
			</fileset>
		</copy>
		
		<replace file="${build.deploy.dir}/webstart/app/webstart.jnlp" token="localhost:8080" value="${webstart.url}"/>
		<replace file="${build.deploy.dir}/conf/nucleus-app.properties" token="localhost:8080" value="${webstart.url}"/>
		
		<!-- jar conf folder -->
		<jar destfile="${build.deploy.dir}/webstart/app/${app.name}-config.jar">
			<fileset dir="${build.deploy.dir}/conf"/>
		</jar>
		
		<!-- sign jars (in order to enable security <all-permissions/>) -->
		<signjar verbose="false" alias="noa" storepass="novabit" keystore="./.keystore">
			<fileset dir="${build.deploy.dir}/webstart/app">
				<include name="${app.name}-client.jar"/>
				<include name="novabit-common.jar"/>
				<include name="${app.name}-xerlin.jar"/>
				<include name="${app.name}-config.jar"/>
				<include name="${app.name}-libs.jar"/>
				<include name="${app.name}-native.jar"/>
			</fileset>
		</signjar>
		
		<!-- war webstart application -->
		<war destfile="${build.deploy.dir}/${app.name}-webstart.war" webxml="${conf.dir}/webstart/WEB-INF/web.xml">
			<lib dir="${lib.dir}">
				<include name="jnlp-servlet.jar"/>
			</lib>
			<fileset dir="${build.deploy.dir}/webstart" excludes="META-INF/"/>
		</war>
	</target>
	
	<target name="dist.webstart" depends="war.webstart, javadoc, build.ruledoc" description="copy files to distribution directory.">
		<mkdir dir="${dist.dir}"/>

		<!-- make .ear -->
		<ear destfile="${build.deploy.dir}/${app.name}.ear" appxml="${build.deploy.dir}/webstart/META-INF/application.xml">
			<fileset dir="${build.deploy.dir}" includes="${app.name}-server.jar"/>
			<fileset dir="${novabit.common.build.deploy.dir}" includes="novabit-common.jar, novabit-common-ejb.jar"/>
			<fileset dir="${lib.dir}" includes="quartz-1.4.2.jar"/>
			<fileset dir="${build.deploy.dir}" includes="${app.name}-webstart.war"></fileset>
		</ear>
		<mkdir dir="${dist.dir}/server/deploy"/>
		<copy todir="${dist.dir}/server/deploy">
			<fileset dir="${build.deploy.dir}" includes="${app.name}.ear"/>
		</copy>

		<!-- copy server config -->
		<mkdir dir="${dist.dir}/server/conf"/>
		<copy todir="${dist.dir}/server/conf">
			<fileset dir="${conf.dir}/jboss/conf" includes="log4j.xml"/>
		</copy>

		<!-- copy client config: -->
		<mkdir dir="${dist.dir}/client"/>
		<copy todir="${dist.dir}/client">
			<fileset dir="${conf.dir}/eplus" includes="*.bat"/>
		</copy>
		<mkdir dir="${dist.dir}/client/conf"/>
		<copy todir="${dist.dir}/client/conf">
			<fileset dir="${conf.dir}/eplus" includes="log4j.xml"/>
			<fileset dir="${conf.dir}" includes="jndi.properties, layoutml.dtd, nucleus-app.properties"/>
		</copy>
		<mkdir dir="${dist.dir}/client/conf/doc"/>
		<copy todir="${dist.dir}/client/conf/doc">
			<fileset dir="${build.classes.dir}/de/novabit/nucleus/client/help/releasenotes" includes="releasenotes.html"/>
		</copy>
		<mkdir dir="${dist.dir}/client/conf/icons"/>
		<copy todir="${dist.dir}/client/conf/icons">
			<fileset dir="${conf.dir}/icons" includes="*.png"/>
		</copy>

		<!-- copy client libs: -->
		<mkdir dir="${dist.dir}/client/lib"/>
		<copy todir="${dist.dir}/client/lib">
			<fileset dir="${build.deploy.dir}" includes="*.jar" excludes="${app.name}-server.jar, novabit-jboss.jar"/>
		</copy>

		<!-- copy layouts: -->
		<mkdir dir="${dist.dir}/client/layoutml"/>
		<copy todir="${dist.dir}/client/layoutml">
			<fileset dir="${src.dir}/layoutml" excludes="Test-Modul.layoutml"/>
			<fileset dir="${src.dir}/layoutml"/>
		</copy>

		<!-- copy rules: -->
		<!--
		<mkdir dir="${dist.dir}/client/rules"/>
		<copy todir="${dist.dir}/client/rules">
			<fileset dir="${src.dir}/rules"/>
		</copy>
		-->
		<!-- copy reports/datasources: -->
		<!--
		<mkdir dir="${dist.dir}/client/reports"/>
		<copy todir="${dist.dir}/client/reports">
			<fileset dir="${src.dir}/reports"/>
		</copy>
		-->
		
		<!-- copy server libs: -->
		<mkdir dir="${dist.dir}/server/lib"/>
		<copy todir="${dist.dir}/server/lib">
			<fileset dir="${build.deploy.dir}" includes="novabit-jboss.jar"/>
		</copy>

		<!-- copy db script(s): -->
		<mkdir dir="${dist.dir}/scripts"/>
		<copy todir="${dist.dir}/scripts">
			<fileset dir="${db.dir}" excludes="von_eplus/, utils/"/>
		</copy>

		<!-- zip sources: -->
		<zip destfile="${dist.dir}/source.zip">
			<fileset dir="${project.home.dir}" includes="build.*, src/" excludes="CVS"/>
			<fileset dir="${novabit.common.dir}" includes="src/" excludes="CVS"/>
		</zip>

		<!-- zip documentation: -->
		<zip destfile="${dist.dir}/doc.zip">
			<fileset dir="${doc.dir}/systemdokumentation" includes="*.pdf, index.htm, DB-Schema*/, include/, Licenses/"
							 excludes="DB-Schema.vsd, CSV"/>
			<zipfileset dir="${doc.dir}/api" prefix="javadoc"/>
		</zip>
	</target>
</project>
